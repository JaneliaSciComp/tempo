function edited = RecordingSettings(recording, varargin)
    handles.recording = recording;
    
    isAudio = isa(handles.recording, 'AudioRecording');
    isVideo = isa(handles.recording, 'VideoRecording');
    
    if isAudio
        titleString = 'Audio Settings';
        fileLabel = 'Audio file:';
        formatLabel = 'Audio format:';
        rateLabel = 'Sample rate:';
        rateValue = sprintf('%d Hz', handles.recording.sampleRate);
    else
        titleString = 'Video Settings';
        fileLabel = 'Video file:';
        formatLabel = 'Video format:';
        rateLabel = 'Frame rate:';
        rateValue = sprintf('%g FPS', handles.recording.sampleRate);
    end
    
    handles.figure = dialog(...
        'Units', 'points', ...
        'Name', titleString, ...
        'Position', [100, 100, 270, 255], ...
        'Visible', 'off', ...
        'WindowKeyPressFcn', @(hObject, eventdata)handleWindowKeyPress(hObject, eventdata, guidata(hObject)));
    
    % Create the controls.
    
    uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'right', ...
        'Position', [10 220 80 16], ...
        'String', fileLabel, ...
        'Style', 'text');
    uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'left', ...
        'Position', [95 220 200 16], ...
        'String', handles.recording.name, ...
        'TooltipString', handles.recording.filePath, ...
        'Style', 'text');
    
    uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'right', ...
        'Position', [10 190 80 16], ...
        'String', formatLabel, ...
        'Style', 'text');
    uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'left', ...
        'Position', [95 190 200 16], ...
        'String', handles.recording.format(), ...
        'Style', 'text');
    
    uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'right', ...
        'Position', [10 160 80 16], ...
        'String', rateLabel, ...
        'Style', 'text');
    uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'left', ...
        'Position', [95 160 200 16], ...
        'String', rateValue, ...
        'Style', 'text');
    
    uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'right', ...
        'Position', [10 130 80 16], ...
        'String', 'Duration:', ...
        'Style', 'text');
    uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'left', ...
        'Position', [95 130 200 16], ...
        'String', sprintf('%s minutes', secondstr(handles.recording.duration, 1)), ...
        'Style', 'text');
    
    uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'right', ...
        'Position', [10 100 80 16], ...
        'String', 'Start time:', ...
        'Style', 'text');
    handles.offsetEdit = uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'center', ...
        'Position', [95 96 65 26], ...
        'String',  num2str(handles.recording.timeOffset, '%g'), ...
        'Callback', @(hObject,eventdata)handleOffsetEditChanged(hObject,eventdata,guidata(hObject)), ...
        'Style', 'edit');
    uicontrol(...
        'Parent', handles.figure, ...
        'Units', 'points', ...
        'FontSize', 12, ...
        'HorizontalAlignment', 'left', ...
        'Position', [160 100 80 16], ...
        'String', 'seconds', ...
        'Style', 'text');
    
    if isAudio
        uicontrol(...
            'Parent', handles.figure, ...
            'Units', 'points', ...
            'FontSize', 12, ...
            'HorizontalAlignment', 'right', ...
            'Position', [10 70 80 16], ...
            'String', 'Mute:', ...
            'Style', 'text');
        handles.muteCheckbox = uicontrol(...
            'Parent', handles.figure,...
            'Units', 'points', ...
            'FontSize', 12, ...
            'Position', [95 70 18 18], ...
            'String',  '', ...
            'Value', handles.recording.muted, ...
            'Callback', @(hObject,eventdata)handleMuteCheckboxChanged(hObject,eventdata,guidata(hObject)), ...
            'Style', 'checkbox');
        
        if ~isempty(findprop(handles.recording, 'channel'))
            % TODO: will videos ever have a channel property?
            uicontrol(...
                'Parent', handles.figure, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'HorizontalAlignment', 'right', ...
                'Position', [10 50 80 16], ...
                'String', 'Channel:', ...
                'Style', 'text');
            uicontrol(...
                'Parent', handles.figure, ...
                'Units', 'points', ...
                'FontSize', 12, ...
                'HorizontalAlignment', 'right', ...
                'Position', [95 50 80 16], ...
                'String', 'Channel:', ...
                'Style', 'text');
        end
    elseif isVideo
        % TODO: add 'Frame size:' controls
    end
    
    handles.cancelButton = uicontrol(...
        'Parent', handles.figure,...
        'Units', 'points', ...
        'Position', [270 - 10 - 56 - 10 - 56 10 56 20], ...
        'Callback', @(hObject,eventdata)handleCancelSettings(hObject,eventdata,guidata(hObject)), ...
        'String', 'Cancel');
    
    handles.saveButton = uicontrol(...
        'Parent', handles.figure,...
        'Units', 'points', ...
        'Position', [270 - 10 - 56 10 56 20], ...
        'Callback', @(hObject,eventdata)handleSaveSettings(hObject,eventdata,guidata(hObject)), ...
        'String', 'Save');
    
    % Center and show the window.
    movegui(handles.figure, 'center');
    set(handles.figure, 'Visible', 'on');
    
    % Make a copy of the original settings in case the user cancels or turns off "apply to all".
    handles.originalOffset = handles.recording.timeOffset;
    handles.originalMuting = handles.recording.muted;
    
    guidata(handles.figure, handles);
    
    % Wait for the user to cancel or save.
    uiwait(handles.figure);
    
    if ishandle(handles.figure)
        handles = guidata(handles.figure);
        edited = handles.edited;
        close(handles.figure);
    else
        edited = false;
    end
end


function handleOffsetEditChanged(~, ~, handles)
    offset = str2double(get(handles.offsetEdit, 'String'));
    if isnan(offset)
        offset = 0.0;
    end
    
    handles.recording.timeOffset = offset;
end


function handleMuteCheckboxChanged(~, ~, handles)
    muted = get(handles.muteCheckbox, 'Value') == get(handles.muteCheckbox, 'Max');
    
    handles.recording.muted = muted;
end


function handleWindowKeyPress(hObject, eventData, handles)
    % Handle the return and escape keys.
    if strcmp(eventData.Key, 'return')
        handleSaveSettings(hObject, eventData, handles);
    elseif strcmp(eventData.Key, 'escape')
        handleCancelSettings(hObject, eventData, handles);
    end
end


function handleCancelSettings(~, ~, handles)
    % Reset the recording to its original settings.
    handles.recording.timeOffset = handles.originalOffset;
    handles.recording.muted = handles.originalMuting;
    
    handles.edited = false;
    guidata(handles.figure, handles);
    
    uiresume;
end


function handleSaveSettings(~, ~, handles)
    % Move focus off of any edit text so the changes are committed.
    uicontrol(handles.saveButton);
    
    handles.edited = true;
    guidata(handles.figure, handles);
    
    uiresume;
end
